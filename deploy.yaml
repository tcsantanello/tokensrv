---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: postgres
  name: postgres
data:
  POSTGRES_DB:       tokens
  POSTGRES_USER:     restsrv
  POSTGRES_PASSWORD: 5up3r-5ekrE7

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: tokensrv
  name: pginit
data:
  init.sql: |
    CREATE EXTENSION pgcrypto;
    CREATE DATABASE  tokens;
  
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres  
        envFrom:
        - configMapRef:
            name: postgres
        env:
        - name: POSTGRES_ROOT_PASSWORD
          value: 908sd9f8023jlg8
        - name: POSTGRES_HOST_AUTH_METHOD
          value: md5
        image: postgres:9.6
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host localhost
          failureThreshold: 6
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host localhost
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
        - mountPath: /docker-entrypoint-initdb.d
          name: pginit
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgres
      - name: pginit
        configMap:
          name: pginit

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
          
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: tokensrv
data:
  config: |
    [database]
    url = <url>
    pool_size = 10
    [log]
    level=trace
  setup: |
    #!/bin/sh

    set -xe

    sed "s,<url>,psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB},g" \
                < /vol/config/config > /vol/etc/restsrv.ini

    cat /vol/etc/restsrv.ini
    
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: tokensrv
  name: tokensrv
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: tokensrv
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: tokensrv
      annotations:
        prometheus.io/scrape: true
    spec:
      initContainers:
      - name: config
        image: busybox:latest
        envFrom:
        - configMapRef:
            name: postgres
        command:
          - sh
          - /vol/config/setup
        volumeMounts:
        - mountPath: /vol/etc
          name: etc
        - mountPath: /vol/config
          name: config
      containers:
      - name: tokensrv
        image: quay.io/tcsantanello/restsrv:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: LC_ALL
          value: C
        - name: LANGUAGE
          value: ""
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /status
            port: web
          failureThreshold: 6
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /status
            port: web
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources: {}
        volumeMounts:
        - mountPath: /opt/token/etc
          name: etc
      volumes:
      - name: etc
        emptyDir: {}
      - name: config
        configMap:
          name: tokensrv 

---

apiVersion: v1
kind: Service
metadata:
  name: tokensrv
spec:
  ports:
    - name: web
      protocol: TCP
      port: 80
      targetPort: web
  selector:
    app: tokensrv

---

kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: tokensrv
  labels:
    app: tokensrv
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
spec:
  tls:
    - hosts:
        - tokensrv.some-host.net
      secretName: tokensrv-tls
  rules:
    - host: tokensrv.some-host.net
      http:
        paths:
          - path: /vaults
            backend:
              serviceName: tokensrv
              servicePort: web
